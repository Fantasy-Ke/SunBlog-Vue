//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import  moment from 'moment';

class ErrorInfo{
    message:any
    init(_data?: any) {
      if (_data) {
          this.message = _data["message"];
      }
  }
  
  static fromJS(data: any): ErrorInfo {
      data = typeof data === 'object' ? data : {};
      let result = new ErrorInfo();
      result.init(data);
      return result;
  }
  
  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["message"] = this.message;
      return data;
  }
}
class ZResponseBase{
    statusCode: number;
    error: ErrorInfo;
    unAuthorizedRequest: boolean;
    extras: any;
    success:boolean;
  
    init(_data?: any) {
      if (_data) {
          this.statusCode = _data["statusCode"];
          this.error = ErrorInfo.fromJS(_data["error"]);
          this.unAuthorizedRequest = _data["unAuthorizedRequest"];
          this.extras = _data["extras"];
          this.success = _data["success"];
      }
  }
  
  static fromJS(data: any): ZResponseBase {
      data = typeof data === 'object' ? data : {};
      let result = new ZResponseBase();
      result.init(data);
      return result;
  }
  
  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["statusCode"] = this.statusCode;
      data["error"] = this.error;
      data["unAuthorizedRequest"] = this.unAuthorizedRequest;
      data["extras"] = this.extras;
      data["success"] = this.success;
      return data;
  }
}
class ZEngineResponse<T = any> extends ZResponseBase{
    result: T;
}


export class TestServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 获取jwttoken
     * @param body (optional) 
     * @return Success
     */
    login(body: ZUserInfoDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<string>> {
        let url_ = this.baseUrl + "/api/Test/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<ZEngineResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string>>(null as any);
    }

    /**
     * 获取jwttoken
     * @return Success
     */
    getUser( cancelToken?: CancelToken): Promise<ZEngineResponse<string>> {
        let url_ = this.baseUrl + "/api/Test/GetUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: AxiosResponse): Promise<ZEngineResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string>>(result200Data);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string>>(null as any);
    }

    /**
     * @return Success
     */
    logout( cancelToken?: CancelToken): Promise<ZEngineResponse<string>> {
        let url_ = this.baseUrl + "/api/Test/Logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: AxiosResponse): Promise<ZEngineResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string>>(null as any);
    }

    /**
     * 创建用户
     * @return Success
     */
    createUser( cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Test/CreateUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 获取用户
     * @return Success
     */
    seacthUser( cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        let url_ = this.baseUrl + "/api/Test/SeacthUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeacthUser(_response);
        });
    }

    protected processSeacthUser(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ZUserInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(result200Data);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(null as any);
    }

    /**
     * 获取用户
     * @return Success
     */
    seacthUserCache( cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        let url_ = this.baseUrl + "/api/Test/SeacthUserCache";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSeacthUserCache(_response);
        });
    }

    protected processSeacthUserCache(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ZUserInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(result200Data);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(null as any);
    }
}

export class ServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 查询
     * @return Success
     */
    weatherForecast( cancelToken?: CancelToken): Promise<ZEngineResponse<string>> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processWeatherForecast(_response);
        });
    }

    protected processWeatherForecast(response: AxiosResponse): Promise<ZEngineResponse<string>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<string>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<string>>(null as any);
    }
}

export class UsersServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 创建
     * @return Success
     */
    create( cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfo>> {
        let url_ = this.baseUrl + "/api/Users/Create";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfo>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ZUserInfo.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfo>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfo>>(null as any);
    }

    /**
     * 查询一个用户
     * @return Success
     */
    getFrist( cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        let url_ = this.baseUrl + "/api/Users/GetFrist";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFrist(_response);
        });
    }

    protected processGetFrist(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfoDto[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ZUserInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfoDto[]>>(null as any);
    }

    /**
     * 登录
     * @param body (optional) 
     * @return Success
     */
    login(body: ZUserInfoDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ZUserInfoDto>> {
        let url_ = this.baseUrl + "/api/Users/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<ZEngineResponse<ZUserInfoDto>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ZUserInfoDto.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ZUserInfoDto>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ZUserInfoDto>>(null as any);
    }
}

export class TalksSsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加修改说说
     * @param body (optional) 
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateTalksInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/TalksSs/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 说说分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: TalksPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<TalksPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/TalksSs/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<TalksPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = TalksPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TalksPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TalksPageOutputPageResult>>(null as any);
    }
}

export class TalksCsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 说说列表
     * @param body (optional) 
     * @return Success
     */
    getList(body: Pagination | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<TalksOutputPageResult>> {
        let url_ = this.baseUrl + "/api/TalksCs/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ZEngineResponse<TalksOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = TalksOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TalksOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TalksOutputPageResult>>(null as any);
    }

    /**
     * 说说详情
     * @param id (optional) 
     * @return Success
     */
    talkDetail(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<TalkDetailOutput>> {
        let url_ = this.baseUrl + "/api/TalksCs/TalkDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTalkDetail(_response);
        });
    }

    protected processTalkDetail(response: AxiosResponse): Promise<ZEngineResponse<TalkDetailOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = TalkDetailOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TalkDetailOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TalkDetailOutput>>(null as any);
    }
}

export class TagssServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加修改
     * @param body (optional) 
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateTagInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Tagss/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除
     * @param id (optional) 
     * @return Success
     */
    delete(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/Tagss/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 文章标签下拉选项
     * @return Success
     */
    select( cancelToken?: CancelToken): Promise<ZEngineResponse<SelectOutput[]>> {
        let url_ = this.baseUrl + "/api/Tagss/Select";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSelect(_response);
        });
    }

    protected processSelect(response: AxiosResponse): Promise<ZEngineResponse<SelectOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SelectOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<SelectOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<SelectOutput[]>>(null as any);
    }

    /**
     * 标签列表分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: TagsPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<TagsPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/Tagss/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<TagsPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = TagsPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TagsPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TagsPageOutputPageResult>>(null as any);
    }
}

export class CommentsCsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 评论、回复
     * @param body (optional) 
     * @return Success
     */
    add(body: AddCommentInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CommentsCs/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 评论列表
     * @param body (optional) 
     * @return Success
     */
    getList(body: CommentPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<CommentOutputPageResult>> {
        let url_ = this.baseUrl + "/api/CommentsCs/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ZEngineResponse<CommentOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = CommentOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<CommentOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<CommentOutputPageResult>>(null as any);
    }

    /**
     * 点赞/取消点赞
     * @param body (optional) 对象ID
     * @return Success
     */
    praise(body: KeyDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/CommentsCs/Praise";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPraise(_response);
        });
    }

    protected processPraise(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 回复分页
     * @param body (optional) 
     * @return Success
     */
    replyList(body: CommentPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ReplyOutputPageResult>> {
        let url_ = this.baseUrl + "/api/CommentsCs/ReplyList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReplyList(_response);
        });
    }

    protected processReplyList(response: AxiosResponse): Promise<ZEngineResponse<ReplyOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ReplyOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ReplyOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ReplyOutputPageResult>>(null as any);
    }
}

export class ArticleSsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加修改
     * @param body (optional) 
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateArticleInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/ArticleSs/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 删除
     * @param body (optional) 
     * @return Success
     */
    delete(body: KeyDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/ArticleSs/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 查询详细
     * @param id (optional) 
     * @return Success
     */
    getDetail(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleDetailOutput>> {
        let url_ = this.baseUrl + "/api/ArticleSs/GetDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDetail(_response);
        });
    }

    protected processGetDetail(response: AxiosResponse): Promise<ZEngineResponse<ArticleDetailOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticleDetailOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleDetailOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleDetailOutput>>(null as any);
    }

    /**
     * 文章列表分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: ArticlePageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ArticlePageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/ArticleSs/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<ArticlePageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticlePageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticlePageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticlePageOutputPageResult>>(null as any);
    }
}

export class ArticleCsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 文章栏目分类
     * @return Success
     */
    categories( cancelToken?: CancelToken): Promise<ZEngineResponse<CategoryOutput[]>> {
        let url_ = this.baseUrl + "/api/ArticleCs/Categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCategories(_response);
        });
    }

    protected processCategories(response: AxiosResponse): Promise<ZEngineResponse<CategoryOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CategoryOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<CategoryOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<CategoryOutput[]>>(null as any);
    }

    /**
     * 文章表查询
     * @param body (optional) 
     * @return Success
     */
    getList(body: ArticleListQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleOutputPageResult>> {
        let url_ = this.baseUrl + "/api/ArticleCs/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ZEngineResponse<ArticleOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticleOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleOutputPageResult>>(null as any);
    }

    /**
     * 文章详情
     * @param id (optional) 文章ID
     * @return Success
     */
    info(id: string | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleInfoOutput>> {
        let url_ = this.baseUrl + "/api/ArticleCs/Info?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInfo(_response);
        });
    }

    protected processInfo(response: AxiosResponse): Promise<ZEngineResponse<ArticleInfoOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticleInfoOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleInfoOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleInfoOutput>>(null as any);
    }

    /**
     * 最新5片文章
     * @return Success
     */
    latest( cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleBasicsOutput[]>> {
        let url_ = this.baseUrl + "/api/ArticleCs/Latest";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLatest(_response);
        });
    }

    protected processLatest(response: AxiosResponse): Promise<ZEngineResponse<ArticleBasicsOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(ArticleBasicsOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleBasicsOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleBasicsOutput[]>>(null as any);
    }

    /**
     * 文章信息统计
     * @return Success
     */
    reportStatistics( cancelToken?: CancelToken): Promise<ZEngineResponse<ArticleReportOutput>> {
        let url_ = this.baseUrl + "/api/ArticleCs/ReportStatistics";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReportStatistics(_response);
        });
    }

    protected processReportStatistics(response: AxiosResponse): Promise<ZEngineResponse<ArticleReportOutput>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = ArticleReportOutput.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<ArticleReportOutput>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<ArticleReportOutput>>(null as any);
    }

    /**
     * 标签列表
     * @return Success
     */
    tags( cancelToken?: CancelToken): Promise<ZEngineResponse<TagsOutput[]>> {
        let url_ = this.baseUrl + "/api/ArticleCs/Tags";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTags(_response);
        });
    }

    protected processTags(response: AxiosResponse): Promise<ZEngineResponse<TagsOutput[]>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(TagsOutput.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<TagsOutput[]>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<TagsOutput[]>>(null as any);
    }
}

export class ArticleCategorysServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加文章所属栏目
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateOrUpdateArticleCategoryDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/ArticleCategorys/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 更新文章所属栏目
     * @param body (optional) 
     * @return Success
     */
    update(body: CreateOrUpdateArticleCategoryDto | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/ArticleCategorys/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }
}

export class AlbumsSsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 添加修改
     * @param body (optional) 
     * @return Success
     */
    createOrUpdate(body: CreateOrUpdateAlbumsInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<void>> {
        let url_ = this.baseUrl + "/api/AlbumsSs/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateOrUpdate(_response);
        });
    }

    protected processCreateOrUpdate(response: AxiosResponse): Promise<ZEngineResponse<void>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<ZEngineResponse<void>>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<void>>(null as any);
    }

    /**
     * 相册列表分页查询
     * @param body (optional) 
     * @return Success
     */
    getPage(body: AlbumsPageQueryInput | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<AlbumsPageOutputPageResult>> {
        let url_ = this.baseUrl + "/api/AlbumsSs/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPage(_response);
        });
    }

    protected processGetPage(response: AxiosResponse): Promise<ZEngineResponse<AlbumsPageOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = AlbumsPageOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<AlbumsPageOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<AlbumsPageOutputPageResult>>(null as any);
    }
}

export class AlbumsCsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * 相册列表
     * @param body (optional) 
     * @return Success
     */
    getList(body: Pagination | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<AlbumsOutputPageResult>> {
        let url_ = this.baseUrl + "/api/AlbumsCs/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetList(_response);
        });
    }

    protected processGetList(response: AxiosResponse): Promise<ZEngineResponse<AlbumsOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = AlbumsOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<AlbumsOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<AlbumsOutputPageResult>>(null as any);
    }

    /**
     * 相册下的图片
     * @param albumId (optional) 相册ID
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    pictures(albumId: string | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken): Promise<ZEngineResponse<PictureOutputPageResult>> {
        let url_ = this.baseUrl + "/api/AlbumsCs/Pictures?";
        if (albumId === null)
            throw new Error("The parameter 'albumId' cannot be null.");
        else if (albumId !== undefined)
            url_ += "AlbumId=" + encodeURIComponent("" + albumId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPictures(_response);
        });
    }

    protected processPictures(response: AxiosResponse): Promise<ZEngineResponse<PictureOutputPageResult>> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let result200Data: any = null;
            let resultData200  = _responseText.result;
            result200 = PictureOutputPageResult.fromJS(resultData200);
            result200Data = ZEngineResponse.fromJS(_responseText);
            result200Data.result = result200;
            return Promise.resolve<ZEngineResponse<PictureOutputPageResult>>(result200Data);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ZEngineResponse<PictureOutputPageResult>>(null as any);
    }
}

export class AddCommentInput implements IAddCommentInput {
    /** 对应模块ID（null表留言，0代表友链的评论） */
    moduleId: number | undefined;
    /** 顶级楼层评论ID */
    rootId: number | undefined;
    /** 被回复的评论ID */
    parentId: number | undefined;
    /** 回复人ID */
    replyAccountId: number | undefined;
    /** 评论内容 */
    content: string;

    constructor(data?: IAddCommentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.moduleId = _data["moduleId"];
            this.rootId = _data["rootId"];
            this.parentId = _data["parentId"];
            this.replyAccountId = _data["replyAccountId"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): AddCommentInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddCommentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["moduleId"] = this.moduleId;
        data["rootId"] = this.rootId;
        data["parentId"] = this.parentId;
        data["replyAccountId"] = this.replyAccountId;
        data["content"] = this.content;
        return data;
    }

    clone(): AddCommentInput {
        const json = this.toJSON();
        let result = new AddCommentInput();
        result.init(json);
        return result;
    }
}

export interface IAddCommentInput {
    /** 对应模块ID（null表留言，0代表友链的评论） */
    moduleId: number | undefined;
    /** 顶级楼层评论ID */
    rootId: number | undefined;
    /** 被回复的评论ID */
    parentId: number | undefined;
    /** 回复人ID */
    replyAccountId: number | undefined;
    /** 评论内容 */
    content: string;
}

export class AlbumsOutput implements IAlbumsOutput {
    /** 相册ID */
    id: string;
    /** 相册名称 */
    name: string | undefined;
    /** 相册封面 */
    cover: string | undefined;
    /** 相册描述 */
    remark: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: IAlbumsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.remark = _data["remark"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AlbumsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["remark"] = this.remark;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): AlbumsOutput {
        const json = this.toJSON();
        let result = new AlbumsOutput();
        result.init(json);
        return result;
    }
}

export interface IAlbumsOutput {
    /** 相册ID */
    id: string;
    /** 相册名称 */
    name: string | undefined;
    /** 相册封面 */
    cover: string | undefined;
    /** 相册描述 */
    remark: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
}

export class AlbumsOutputPageResult implements IAlbumsOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AlbumsOutput[] | undefined;

    constructor(data?: IAlbumsOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(AlbumsOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AlbumsOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): AlbumsOutputPageResult {
        const json = this.toJSON();
        let result = new AlbumsOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IAlbumsOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AlbumsOutput[] | undefined;
}

export class AlbumsPageOutput implements IAlbumsPageOutput {
    /** 相册ID */
    id: string;
    /** 名称 */
    name: string | undefined;
    type: CoverType;
    status: AvailabilityStatus;
    /** 是否显示 */
    isVisible: boolean;
    /** 排序 */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 封面 */
    cover: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: IAlbumsPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.isVisible = _data["isVisible"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            this.cover = _data["cover"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AlbumsPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        data["status"] = this.status;
        data["isVisible"] = this.isVisible;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        data["cover"] = this.cover;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): AlbumsPageOutput {
        const json = this.toJSON();
        let result = new AlbumsPageOutput();
        result.init(json);
        return result;
    }
}

export interface IAlbumsPageOutput {
    /** 相册ID */
    id: string;
    /** 名称 */
    name: string | undefined;
    type: CoverType;
    status: AvailabilityStatus;
    /** 是否显示 */
    isVisible: boolean;
    /** 排序 */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 封面 */
    cover: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
}

export class AlbumsPageOutputPageResult implements IAlbumsPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AlbumsPageOutput[] | undefined;

    constructor(data?: IAlbumsPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(AlbumsPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AlbumsPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): AlbumsPageOutputPageResult {
        const json = this.toJSON();
        let result = new AlbumsPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IAlbumsPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: AlbumsPageOutput[] | undefined;
}

export class AlbumsPageQueryInput implements IAlbumsPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 相册名称 */
    name: string | undefined;
    type: CoverType;

    constructor(data?: IAlbumsPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): AlbumsPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new AlbumsPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }

    clone(): AlbumsPageQueryInput {
        const json = this.toJSON();
        let result = new AlbumsPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface IAlbumsPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 相册名称 */
    name: string | undefined;
    type: CoverType;
}

export class ArticleBasicsOutput implements IArticleBasicsOutput {
    /** 文章ID */
    id: string;
    /** 封面图 */
    cover: string | undefined;
    /** 类型 */
    type: number;
    /** 标题 */
    title: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment | undefined;

    constructor(data?: IArticleBasicsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.title = _data["title"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ArticleBasicsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleBasicsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["title"] = this.title;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): ArticleBasicsOutput {
        const json = this.toJSON();
        let result = new ArticleBasicsOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleBasicsOutput {
    /** 文章ID */
    id: string;
    /** 封面图 */
    cover: string | undefined;
    /** 类型 */
    type: number;
    /** 标题 */
    title: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment | undefined;
}

export class ArticleDetailOutput implements IArticleDetailOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 简介 */
    summary: string | undefined;
    /** 封面 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 原文地址 */
    link: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 排序 */
    sort: number;
    /** 作者 */
    author: string | undefined;
    /** 文章内容 */
    content: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是个是HTML */
    isHtml: boolean;
    creationType: CreationType;
    /** 过期时间（过期后文章不显示） */
    expiredTime: moment.Moment | undefined;
    /** 标签 */
    tags: string[] | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;

    constructor(data?: IArticleDetailOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.summary = _data["summary"];
            this.cover = _data["cover"];
            this.status = _data["status"];
            this.link = _data["link"];
            this.isTop = _data["isTop"];
            this.sort = _data["sort"];
            this.author = _data["author"];
            this.content = _data["content"];
            this.isAllowComments = _data["isAllowComments"];
            this.isHtml = _data["isHtml"];
            this.creationType = _data["creationType"];
            this.expiredTime = _data["expiredTime"] ? moment(_data["expiredTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags.push(item);
            }
            this.categoryId = _data["categoryId"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ArticleDetailOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleDetailOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["summary"] = this.summary;
        data["cover"] = this.cover;
        data["status"] = this.status;
        data["link"] = this.link;
        data["isTop"] = this.isTop;
        data["sort"] = this.sort;
        data["author"] = this.author;
        data["content"] = this.content;
        data["isAllowComments"] = this.isAllowComments;
        data["isHtml"] = this.isHtml;
        data["creationType"] = this.creationType;
        data["expiredTime"] = this.expiredTime ? this.expiredTime.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["categoryId"] = this.categoryId;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): ArticleDetailOutput {
        const json = this.toJSON();
        let result = new ArticleDetailOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleDetailOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 简介 */
    summary: string | undefined;
    /** 封面 */
    cover: string | undefined;
    status: AvailabilityStatus;
    /** 原文地址 */
    link: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 排序 */
    sort: number;
    /** 作者 */
    author: string | undefined;
    /** 文章内容 */
    content: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是个是HTML */
    isHtml: boolean;
    creationType: CreationType;
    /** 过期时间（过期后文章不显示） */
    expiredTime: moment.Moment | undefined;
    /** 标签 */
    tags: string[] | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
}

export class ArticleInfoOutput implements IArticleInfoOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 文章内容 */
    content: string | undefined;
    /** 简介 */
    summary: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 作者 */
    author: string | undefined;
    /** 浏览量 */
    views: number;
    creationType: CreationType;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是否是html */
    isHtml: boolean;
    /** 是否置顶 */
    isTop: boolean;
    /** 转载链接 */
    link: string | undefined;
    /** 点赞数量 */
    praiseTotal: number;
    /** 当前用户是否已点赞 */
    isPraise: boolean;
    /** 栏目Id */
    categoryId: string;
    /** 栏目名称 */
    categoryName: string | undefined;
    /** 最后更新时间 */
    updatedTime: moment.Moment | undefined;
    prev: ArticleBasicsOutput;
    next: ArticleBasicsOutput;
    /** 随机 */
    random: ArticleBasicsOutput[] | undefined;
    /** 标签 */
    tags: TagsOutput[] | undefined;

    constructor(data?: IArticleInfoOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.summary = _data["summary"];
            this.cover = _data["cover"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
            this.author = _data["author"];
            this.views = _data["views"];
            this.creationType = _data["creationType"];
            this.isAllowComments = _data["isAllowComments"];
            this.isHtml = _data["isHtml"];
            this.isTop = _data["isTop"];
            this.link = _data["link"];
            this.praiseTotal = _data["praiseTotal"];
            this.isPraise = _data["isPraise"];
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.updatedTime = _data["updatedTime"] ? moment(_data["updatedTime"].toString()) : <any>undefined;
            this.prev = _data["prev"] ? ArticleBasicsOutput.fromJS(_data["prev"]) : <any>undefined;
            this.next = _data["next"] ? ArticleBasicsOutput.fromJS(_data["next"]) : <any>undefined;
            if (Array.isArray(_data["random"])) {
                this.random = [] as any;
                for (let item of _data["random"])
                    this.random.push(ArticleBasicsOutput.fromJS(item));
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags.push(TagsOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ArticleInfoOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleInfoOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["summary"] = this.summary;
        data["cover"] = this.cover;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        data["author"] = this.author;
        data["views"] = this.views;
        data["creationType"] = this.creationType;
        data["isAllowComments"] = this.isAllowComments;
        data["isHtml"] = this.isHtml;
        data["isTop"] = this.isTop;
        data["link"] = this.link;
        data["praiseTotal"] = this.praiseTotal;
        data["isPraise"] = this.isPraise;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["updatedTime"] = this.updatedTime ? this.updatedTime.toISOString() : <any>undefined;
        data["prev"] = this.prev ? this.prev.toJSON() : <any>undefined;
        data["next"] = this.next ? this.next.toJSON() : <any>undefined;
        if (Array.isArray(this.random)) {
            data["random"] = [];
            for (let item of this.random)
                data["random"].push(item.toJSON());
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        return data;
    }

    clone(): ArticleInfoOutput {
        const json = this.toJSON();
        let result = new ArticleInfoOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleInfoOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 文章内容 */
    content: string | undefined;
    /** 简介 */
    summary: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 作者 */
    author: string | undefined;
    /** 浏览量 */
    views: number;
    creationType: CreationType;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是否是html */
    isHtml: boolean;
    /** 是否置顶 */
    isTop: boolean;
    /** 转载链接 */
    link: string | undefined;
    /** 点赞数量 */
    praiseTotal: number;
    /** 当前用户是否已点赞 */
    isPraise: boolean;
    /** 栏目Id */
    categoryId: string;
    /** 栏目名称 */
    categoryName: string | undefined;
    /** 最后更新时间 */
    updatedTime: moment.Moment | undefined;
    prev: ArticleBasicsOutput;
    next: ArticleBasicsOutput;
    /** 随机 */
    random: ArticleBasicsOutput[] | undefined;
    /** 标签 */
    tags: TagsOutput[] | undefined;
}

export class ArticleListQueryInput implements IArticleListQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标签ID */
    tagId: string | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
    /** 关键词 */
    keyword: string | undefined;

    constructor(data?: IArticleListQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.tagId = _data["tagId"];
            this.categoryId = _data["categoryId"];
            this.keyword = _data["keyword"];
        }
    }

    static fromJS(data: any): ArticleListQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleListQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["tagId"] = this.tagId;
        data["categoryId"] = this.categoryId;
        data["keyword"] = this.keyword;
        return data;
    }

    clone(): ArticleListQueryInput {
        const json = this.toJSON();
        let result = new ArticleListQueryInput();
        result.init(json);
        return result;
    }
}

export interface IArticleListQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标签ID */
    tagId: string | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
    /** 关键词 */
    keyword: string | undefined;
}

export class ArticleOutput implements IArticleOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 栏目ID */
    categoryId: string;
    /** 栏目名称 */
    categoryName: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    creationType: CreationType;
    /** 简介 */
    summary: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 标签 */
    tags: TagsOutput[] | undefined;

    constructor(data?: IArticleOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.isTop = _data["isTop"];
            this.creationType = _data["creationType"];
            this.summary = _data["summary"];
            this.cover = _data["cover"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags.push(TagsOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ArticleOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["isTop"] = this.isTop;
        data["creationType"] = this.creationType;
        data["summary"] = this.summary;
        data["cover"] = this.cover;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        return data;
    }

    clone(): ArticleOutput {
        const json = this.toJSON();
        let result = new ArticleOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    /** 栏目ID */
    categoryId: string;
    /** 栏目名称 */
    categoryName: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    creationType: CreationType;
    /** 简介 */
    summary: string | undefined;
    /** 封面图 */
    cover: string | undefined;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 标签 */
    tags: TagsOutput[] | undefined;
}

export class ArticleOutputPageResult implements IArticleOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ArticleOutput[] | undefined;

    constructor(data?: IArticleOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(ArticleOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ArticleOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): ArticleOutputPageResult {
        const json = this.toJSON();
        let result = new ArticleOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IArticleOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ArticleOutput[] | undefined;
}

export class ArticlePageOutput implements IArticlePageOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    status: AvailabilityStatus;
    /** 排序 */
    sort: number;
    /** 封面 */
    cover: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 创建时间 */
    createdTime: moment.Moment;
    creationType: CreationType;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 浏览次数 */
    views: number;
    /** 栏目名称 */
    categoryName: string | undefined;

    constructor(data?: IArticlePageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.cover = _data["cover"];
            this.isTop = _data["isTop"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            this.creationType = _data["creationType"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
            this.views = _data["views"];
            this.categoryName = _data["categoryName"];
        }
    }

    static fromJS(data: any): ArticlePageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticlePageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["cover"] = this.cover;
        data["isTop"] = this.isTop;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["creationType"] = this.creationType;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        data["views"] = this.views;
        data["categoryName"] = this.categoryName;
        return data;
    }

    clone(): ArticlePageOutput {
        const json = this.toJSON();
        let result = new ArticlePageOutput();
        result.init(json);
        return result;
    }
}

export interface IArticlePageOutput {
    /** 文章ID */
    id: string;
    /** 标题 */
    title: string | undefined;
    status: AvailabilityStatus;
    /** 排序 */
    sort: number;
    /** 封面 */
    cover: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 创建时间 */
    createdTime: moment.Moment;
    creationType: CreationType;
    /** 发布时间 */
    publishTime: moment.Moment;
    /** 浏览次数 */
    views: number;
    /** 栏目名称 */
    categoryName: string | undefined;
}

export class ArticlePageOutputPageResult implements IArticlePageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ArticlePageOutput[] | undefined;

    constructor(data?: IArticlePageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(ArticlePageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ArticlePageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new ArticlePageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): ArticlePageOutputPageResult {
        const json = this.toJSON();
        let result = new ArticlePageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IArticlePageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ArticlePageOutput[] | undefined;
}

export class ArticlePageQueryInput implements IArticlePageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标题 */
    title: string | undefined;
    /** 栏目ID */
    categoryId: string | undefined;

    constructor(data?: IArticlePageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.title = _data["title"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): ArticlePageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticlePageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["title"] = this.title;
        data["categoryId"] = this.categoryId;
        return data;
    }

    clone(): ArticlePageQueryInput {
        const json = this.toJSON();
        let result = new ArticlePageQueryInput();
        result.init(json);
        return result;
    }
}

export interface IArticlePageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标题 */
    title: string | undefined;
    /** 栏目ID */
    categoryId: string | undefined;
}

export class ArticleReportOutput implements IArticleReportOutput {
    /** 文章数量 */
    articleCount: number;
    /** 标签数量 */
    tagCount: number;
    /** 栏目数量 */
    categoryCount: number;
    /** 用户量 */
    userCount: number;
    /** 友链数量 */
    linkCount: number;

    constructor(data?: IArticleReportOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.articleCount = _data["articleCount"];
            this.tagCount = _data["tagCount"];
            this.categoryCount = _data["categoryCount"];
            this.userCount = _data["userCount"];
            this.linkCount = _data["linkCount"];
        }
    }

    static fromJS(data: any): ArticleReportOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleReportOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleCount"] = this.articleCount;
        data["tagCount"] = this.tagCount;
        data["categoryCount"] = this.categoryCount;
        data["userCount"] = this.userCount;
        data["linkCount"] = this.linkCount;
        return data;
    }

    clone(): ArticleReportOutput {
        const json = this.toJSON();
        let result = new ArticleReportOutput();
        result.init(json);
        return result;
    }
}

export interface IArticleReportOutput {
    /** 文章数量 */
    articleCount: number;
    /** 标签数量 */
    tagCount: number;
    /** 栏目数量 */
    categoryCount: number;
    /** 用户量 */
    userCount: number;
    /** 友链数量 */
    linkCount: number;
}

export enum AvailabilityStatus {
    _0 = 0,
    _1 = 1,
}

export class CategoryOutput implements ICategoryOutput {
    /** 栏目ID */
    id: string;
    /** 父级ID */
    parentId: string | undefined;
    /** 排序 */
    sort: number;
    /** 栏目名称 */
    name: string | undefined;
    /** 文章条数 */
    total: number;

    constructor(data?: ICategoryOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.parentId = _data["parentId"];
            this.sort = _data["sort"];
            this.name = _data["name"];
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): CategoryOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["sort"] = this.sort;
        data["name"] = this.name;
        data["total"] = this.total;
        return data;
    }

    clone(): CategoryOutput {
        const json = this.toJSON();
        let result = new CategoryOutput();
        result.init(json);
        return result;
    }
}

export interface ICategoryOutput {
    /** 栏目ID */
    id: string;
    /** 父级ID */
    parentId: string | undefined;
    /** 排序 */
    sort: number;
    /** 栏目名称 */
    name: string | undefined;
    /** 文章条数 */
    total: number;
}

export class CommentOutput implements ICommentOutput {
    /** 评论ID */
    id: string;
    /** 博主标识 */
    isBlogger: boolean;
    /** 评论人ID */
    accountId: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    /** 楼层 */
    index: number;
    /** 评论内容 */
    content: string | undefined;
    /** 回复条数 */
    replyCount: number;
    /** 点赞数量 */
    praiseTotal: number;
    /** 是否已点赞 */
    isPraise: boolean;
    /** Ip地址 */
    ip: string | undefined;
    /** Ip归属地 */
    geolocation: string | undefined;
    /** 评论时间 */
    createdTime: moment.Moment | undefined;
    replyList: ReplyOutputPageResult;

    constructor(data?: ICommentOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isBlogger = _data["isBlogger"];
            this.accountId = _data["accountId"];
            this.nickName = _data["nickName"];
            this.avatar = _data["avatar"];
            this.index = _data["index"];
            this.content = _data["content"];
            this.replyCount = _data["replyCount"];
            this.praiseTotal = _data["praiseTotal"];
            this.isPraise = _data["isPraise"];
            this.ip = _data["ip"];
            this.geolocation = _data["geolocation"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            this.replyList = _data["replyList"] ? ReplyOutputPageResult.fromJS(_data["replyList"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CommentOutput {
        data = typeof data === 'object' ? data : {};
        let result = new CommentOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isBlogger"] = this.isBlogger;
        data["accountId"] = this.accountId;
        data["nickName"] = this.nickName;
        data["avatar"] = this.avatar;
        data["index"] = this.index;
        data["content"] = this.content;
        data["replyCount"] = this.replyCount;
        data["praiseTotal"] = this.praiseTotal;
        data["isPraise"] = this.isPraise;
        data["ip"] = this.ip;
        data["geolocation"] = this.geolocation;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["replyList"] = this.replyList ? this.replyList.toJSON() : <any>undefined;
        return data;
    }

    clone(): CommentOutput {
        const json = this.toJSON();
        let result = new CommentOutput();
        result.init(json);
        return result;
    }
}

export interface ICommentOutput {
    /** 评论ID */
    id: string;
    /** 博主标识 */
    isBlogger: boolean;
    /** 评论人ID */
    accountId: string | undefined;
    /** 昵称 */
    nickName: string | undefined;
    /** 头像 */
    avatar: string | undefined;
    /** 楼层 */
    index: number;
    /** 评论内容 */
    content: string | undefined;
    /** 回复条数 */
    replyCount: number;
    /** 点赞数量 */
    praiseTotal: number;
    /** 是否已点赞 */
    isPraise: boolean;
    /** Ip地址 */
    ip: string | undefined;
    /** Ip归属地 */
    geolocation: string | undefined;
    /** 评论时间 */
    createdTime: moment.Moment | undefined;
    replyList: ReplyOutputPageResult;
}

export class CommentOutputPageResult implements ICommentOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: CommentOutput[] | undefined;

    constructor(data?: ICommentOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(CommentOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CommentOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new CommentOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): CommentOutputPageResult {
        const json = this.toJSON();
        let result = new CommentOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface ICommentOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: CommentOutput[] | undefined;
}

export class CommentPageQueryInput implements ICommentPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 对应模块ID或评论ID（null表留言，0代表友链的评论） */
    id: string | undefined;

    constructor(data?: ICommentPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CommentPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new CommentPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["id"] = this.id;
        return data;
    }

    clone(): CommentPageQueryInput {
        const json = this.toJSON();
        let result = new CommentPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface ICommentPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 对应模块ID或评论ID（null表留言，0代表友链的评论） */
    id: string | undefined;
}

export enum CoverType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
}

export class CreateOrUpdateAlbumsInput implements ICreateOrUpdateAlbumsInput {
    id: string | undefined;
    /** 相册名称 */
    name: string;
    /** 封面图 */
    cover: string;
    type: CoverType;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 是否可见 */
    isVisible: boolean;

    constructor(data?: ICreateOrUpdateAlbumsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
            this.isVisible = _data["isVisible"];
        }
    }

    static fromJS(data: any): CreateOrUpdateAlbumsInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateAlbumsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        data["isVisible"] = this.isVisible;
        return data;
    }

    clone(): CreateOrUpdateAlbumsInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateAlbumsInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateAlbumsInput {
    id: string | undefined;
    /** 相册名称 */
    name: string;
    /** 封面图 */
    cover: string;
    type: CoverType;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
    /** 是否可见 */
    isVisible: boolean;
}

export class CreateOrUpdateArticleCategoryDto implements ICreateOrUpdateArticleCategoryDto {
    articleId: string;
    categoryId: string;

    constructor(data?: ICreateOrUpdateArticleCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.articleId = _data["articleId"];
            this.categoryId = _data["categoryId"];
        }
    }

    static fromJS(data: any): CreateOrUpdateArticleCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateArticleCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleId"] = this.articleId;
        data["categoryId"] = this.categoryId;
        return data;
    }

    clone(): CreateOrUpdateArticleCategoryDto {
        const json = this.toJSON();
        let result = new CreateOrUpdateArticleCategoryDto();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateArticleCategoryDto {
    articleId: string;
    categoryId: string;
}

export class CreateOrUpdateArticleInput implements ICreateOrUpdateArticleInput {
    /** 标题 */
    title: string;
    /** 概要 */
    summary: string;
    /** 封面图 */
    cover: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 作者 */
    author: string;
    /** 原文地址 */
    link: string | undefined;
    creationType: CreationType;
    /** 文章正文（Html或markdown） */
    content: string;
    /** 文章正文是否为html代码 */
    isHtml: boolean;
    /** 发布时间 */
    publishTime: moment.Moment;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 过期时间（过期后文章不显示） */
    expiredTime: moment.Moment | undefined;
    /** 标签 */
    tags: string[];
    /** 栏目ID */
    categoryId: string;
    /** 文章ID */
    id: string | undefined;

    constructor(data?: ICreateOrUpdateArticleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.tags = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.summary = _data["summary"];
            this.cover = _data["cover"];
            this.isTop = _data["isTop"];
            this.author = _data["author"];
            this.link = _data["link"];
            this.creationType = _data["creationType"];
            this.content = _data["content"];
            this.isHtml = _data["isHtml"];
            this.publishTime = _data["publishTime"] ? moment(_data["publishTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.isAllowComments = _data["isAllowComments"];
            this.expiredTime = _data["expiredTime"] ? moment(_data["expiredTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags.push(item);
            }
            this.categoryId = _data["categoryId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateOrUpdateArticleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateArticleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["summary"] = this.summary;
        data["cover"] = this.cover;
        data["isTop"] = this.isTop;
        data["author"] = this.author;
        data["link"] = this.link;
        data["creationType"] = this.creationType;
        data["content"] = this.content;
        data["isHtml"] = this.isHtml;
        data["publishTime"] = this.publishTime ? this.publishTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["isAllowComments"] = this.isAllowComments;
        data["expiredTime"] = this.expiredTime ? this.expiredTime.toISOString() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["categoryId"] = this.categoryId;
        data["id"] = this.id;
        return data;
    }

    clone(): CreateOrUpdateArticleInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateArticleInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateArticleInput {
    /** 标题 */
    title: string;
    /** 概要 */
    summary: string;
    /** 封面图 */
    cover: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 作者 */
    author: string;
    /** 原文地址 */
    link: string | undefined;
    creationType: CreationType;
    /** 文章正文（Html或markdown） */
    content: string;
    /** 文章正文是否为html代码 */
    isHtml: boolean;
    /** 发布时间 */
    publishTime: moment.Moment;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 过期时间（过期后文章不显示） */
    expiredTime: moment.Moment | undefined;
    /** 标签 */
    tags: string[];
    /** 栏目ID */
    categoryId: string;
    /** 文章ID */
    id: string | undefined;
}

export class CreateOrUpdateTagInput implements ICreateOrUpdateTagInput {
    /** 文章ID */
    id: string | undefined;
    /** 标签名称 */
    name: string;
    /** 封面图 */
    cover: string;
    /** 标签颜色 */
    color: string | undefined;
    /** 标签图标 */
    icon: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ICreateOrUpdateTagInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CreateOrUpdateTagInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateTagInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["remark"] = this.remark;
        return data;
    }

    clone(): CreateOrUpdateTagInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateTagInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateTagInput {
    /** 文章ID */
    id: string | undefined;
    /** 标签名称 */
    name: string;
    /** 封面图 */
    cover: string;
    /** 标签颜色 */
    color: string | undefined;
    /** 标签图标 */
    icon: string | undefined;
    status: AvailabilityStatus;
    /** 排序值（值越小越靠前） */
    sort: number;
    /** 备注 */
    remark: string | undefined;
}

export class CreateOrUpdateTalksInput implements ICreateOrUpdateTalksInput {
    id: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 说说正文 */
    content: string;
    /** 图片 */
    images: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    status: AvailabilityStatus;

    constructor(data?: ICreateOrUpdateTalksInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isTop = _data["isTop"];
            this.content = _data["content"];
            this.images = _data["images"];
            this.isAllowComments = _data["isAllowComments"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): CreateOrUpdateTalksInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateTalksInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isTop"] = this.isTop;
        data["content"] = this.content;
        data["images"] = this.images;
        data["isAllowComments"] = this.isAllowComments;
        data["status"] = this.status;
        return data;
    }

    clone(): CreateOrUpdateTalksInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateTalksInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateTalksInput {
    id: string | undefined;
    /** 是否置顶 */
    isTop: boolean;
    /** 说说正文 */
    content: string;
    /** 图片 */
    images: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    status: AvailabilityStatus;
}

export enum CreationType {
    _0 = 0,
    _1 = 1,
}

export class KeyDto implements IKeyDto {
    id: string;

    constructor(data?: IKeyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): KeyDto {
        data = typeof data === 'object' ? data : {};
        let result = new KeyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }

    clone(): KeyDto {
        const json = this.toJSON();
        let result = new KeyDto();
        result.init(json);
        return result;
    }
}

export interface IKeyDto {
    id: string;
}

export class Pagination implements IPagination {
    pageNo: number;
    pageSize: number;

    constructor(data?: IPagination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): Pagination {
        data = typeof data === 'object' ? data : {};
        let result = new Pagination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        return data;
    }

    clone(): Pagination {
        const json = this.toJSON();
        let result = new Pagination();
        result.init(json);
        return result;
    }
}

export interface IPagination {
    pageNo: number;
    pageSize: number;
}

export class PictureOutput implements IPictureOutput {
    /** 图片ID */
    id: string;
    /** 图片地址 */
    url: string | undefined;

    constructor(data?: IPictureOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): PictureOutput {
        data = typeof data === 'object' ? data : {};
        let result = new PictureOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        return data;
    }

    clone(): PictureOutput {
        const json = this.toJSON();
        let result = new PictureOutput();
        result.init(json);
        return result;
    }
}

export interface IPictureOutput {
    /** 图片ID */
    id: string;
    /** 图片地址 */
    url: string | undefined;
}

export class PictureOutputPageResult implements IPictureOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: PictureOutput[] | undefined;

    constructor(data?: IPictureOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(PictureOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PictureOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new PictureOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): PictureOutputPageResult {
        const json = this.toJSON();
        let result = new PictureOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IPictureOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: PictureOutput[] | undefined;
}

export class ReplyOutput implements IReplyOutput {
    /** 评论ID */
    id: string;
    /** 评论内容 */
    content: string | undefined;
    /** 博主标识 */
    isBlogger: boolean;
    /** 顶级楼层评论ID */
    rootId: string | undefined;
    /** 上级评论ID */
    parentId: string | undefined;
    /** 当前评论人ID */
    accountId: string | undefined;
    /** 回复人ID */
    replyAccountId: string | undefined;
    /** 当前人昵称 */
    nickName: string | undefined;
    /** 回复人昵称 */
    relyNickName: string | undefined;
    /** 当前评论人头像 */
    avatar: string | undefined;
    /** Ip地址 */
    ip: string | undefined;
    /** 点赞数量 */
    praiseTotal: number;
    /** 是否已点赞 */
    isPraise: boolean;
    /** Ip所属地 */
    geolocation: string | undefined;
    /** 评论时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: IReplyOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.content = _data["content"];
            this.isBlogger = _data["isBlogger"];
            this.rootId = _data["rootId"];
            this.parentId = _data["parentId"];
            this.accountId = _data["accountId"];
            this.replyAccountId = _data["replyAccountId"];
            this.nickName = _data["nickName"];
            this.relyNickName = _data["relyNickName"];
            this.avatar = _data["avatar"];
            this.ip = _data["ip"];
            this.praiseTotal = _data["praiseTotal"];
            this.isPraise = _data["isPraise"];
            this.geolocation = _data["geolocation"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ReplyOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["content"] = this.content;
        data["isBlogger"] = this.isBlogger;
        data["rootId"] = this.rootId;
        data["parentId"] = this.parentId;
        data["accountId"] = this.accountId;
        data["replyAccountId"] = this.replyAccountId;
        data["nickName"] = this.nickName;
        data["relyNickName"] = this.relyNickName;
        data["avatar"] = this.avatar;
        data["ip"] = this.ip;
        data["praiseTotal"] = this.praiseTotal;
        data["isPraise"] = this.isPraise;
        data["geolocation"] = this.geolocation;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): ReplyOutput {
        const json = this.toJSON();
        let result = new ReplyOutput();
        result.init(json);
        return result;
    }
}

export interface IReplyOutput {
    /** 评论ID */
    id: string;
    /** 评论内容 */
    content: string | undefined;
    /** 博主标识 */
    isBlogger: boolean;
    /** 顶级楼层评论ID */
    rootId: string | undefined;
    /** 上级评论ID */
    parentId: string | undefined;
    /** 当前评论人ID */
    accountId: string | undefined;
    /** 回复人ID */
    replyAccountId: string | undefined;
    /** 当前人昵称 */
    nickName: string | undefined;
    /** 回复人昵称 */
    relyNickName: string | undefined;
    /** 当前评论人头像 */
    avatar: string | undefined;
    /** Ip地址 */
    ip: string | undefined;
    /** 点赞数量 */
    praiseTotal: number;
    /** 是否已点赞 */
    isPraise: boolean;
    /** Ip所属地 */
    geolocation: string | undefined;
    /** 评论时间 */
    createdTime: moment.Moment | undefined;
}

export class ReplyOutputPageResult implements IReplyOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ReplyOutput[] | undefined;

    constructor(data?: IReplyOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(ReplyOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReplyOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): ReplyOutputPageResult {
        const json = this.toJSON();
        let result = new ReplyOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface IReplyOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: ReplyOutput[] | undefined;
}

export class SelectOutput implements ISelectOutput {
    label: string | undefined;
    value: string;

    constructor(data?: ISelectOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): SelectOutput {
        data = typeof data === 'object' ? data : {};
        let result = new SelectOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }

    clone(): SelectOutput {
        const json = this.toJSON();
        let result = new SelectOutput();
        result.init(json);
        return result;
    }
}

export interface ISelectOutput {
    label: string | undefined;
    value: string;
}

export class TagsOutput implements ITagsOutput {
    /** 标签ID */
    id: string;
    /** 图标 */
    icon: string | undefined;
    /** 标签名称 */
    name: string | undefined;
    /** 颜色 */
    color: string | undefined;

    constructor(data?: ITagsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.icon = _data["icon"];
            this.name = _data["name"];
            this.color = _data["color"];
        }
    }

    static fromJS(data: any): TagsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TagsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["icon"] = this.icon;
        data["name"] = this.name;
        data["color"] = this.color;
        return data;
    }

    clone(): TagsOutput {
        const json = this.toJSON();
        let result = new TagsOutput();
        result.init(json);
        return result;
    }
}

export interface ITagsOutput {
    /** 标签ID */
    id: string;
    /** 图标 */
    icon: string | undefined;
    /** 标签名称 */
    name: string | undefined;
    /** 颜色 */
    color: string | undefined;
}

export class TagsPageOutput implements ITagsPageOutput {
    /** 标签ID */
    id: string;
    /** 标签名称 */
    name: string | undefined;
    status: AvailabilityStatus;
    /** 排序 */
    sort: number;
    /** 标签封面 */
    cover: string | undefined;
    /** 标签图标 */
    icon: string | undefined;
    /** 标签颜色 */
    color: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: ITagsPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.status = _data["status"];
            this.sort = _data["sort"];
            this.cover = _data["cover"];
            this.icon = _data["icon"];
            this.color = _data["color"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TagsPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TagsPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["status"] = this.status;
        data["sort"] = this.sort;
        data["cover"] = this.cover;
        data["icon"] = this.icon;
        data["color"] = this.color;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): TagsPageOutput {
        const json = this.toJSON();
        let result = new TagsPageOutput();
        result.init(json);
        return result;
    }
}

export interface ITagsPageOutput {
    /** 标签ID */
    id: string;
    /** 标签名称 */
    name: string | undefined;
    status: AvailabilityStatus;
    /** 排序 */
    sort: number;
    /** 标签封面 */
    cover: string | undefined;
    /** 标签图标 */
    icon: string | undefined;
    /** 标签颜色 */
    color: string | undefined;
    /** 创建时间 */
    createdTime: moment.Moment | undefined;
}

export class TagsPageOutputPageResult implements ITagsPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TagsPageOutput[] | undefined;

    constructor(data?: ITagsPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(TagsPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TagsPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TagsPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): TagsPageOutputPageResult {
        const json = this.toJSON();
        let result = new TagsPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface ITagsPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TagsPageOutput[] | undefined;
}

export class TagsPageQueryInput implements ITagsPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标签名称 */
    name: string | undefined;

    constructor(data?: ITagsPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): TagsPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new TagsPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["name"] = this.name;
        return data;
    }

    clone(): TagsPageQueryInput {
        const json = this.toJSON();
        let result = new TagsPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface ITagsPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 标签名称 */
    name: string | undefined;
}

export class TalkDetailOutput implements ITalkDetailOutput {
    id: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 点赞数量 */
    upvote: number;
    /** 评论数量 */
    comments: number;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;

    constructor(data?: ITalkDetailOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isTop = _data["isTop"];
            this.content = _data["content"];
            this.images = _data["images"];
            this.isPraise = _data["isPraise"];
            this.upvote = _data["upvote"];
            this.comments = _data["comments"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
            this.isAllowComments = _data["isAllowComments"];
        }
    }

    static fromJS(data: any): TalkDetailOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TalkDetailOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isTop"] = this.isTop;
        data["content"] = this.content;
        data["images"] = this.images;
        data["isPraise"] = this.isPraise;
        data["upvote"] = this.upvote;
        data["comments"] = this.comments;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        data["isAllowComments"] = this.isAllowComments;
        return data;
    }

    clone(): TalkDetailOutput {
        const json = this.toJSON();
        let result = new TalkDetailOutput();
        result.init(json);
        return result;
    }
}

export interface ITalkDetailOutput {
    id: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 点赞数量 */
    upvote: number;
    /** 评论数量 */
    comments: number;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
}

export class TalksOutput implements ITalksOutput {
    id: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 点赞数量 */
    upvote: number;
    /** 评论数量 */
    comments: number;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: ITalksOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isTop = _data["isTop"];
            this.content = _data["content"];
            this.images = _data["images"];
            this.isPraise = _data["isPraise"];
            this.upvote = _data["upvote"];
            this.comments = _data["comments"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TalksOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TalksOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isTop"] = this.isTop;
        data["content"] = this.content;
        data["images"] = this.images;
        data["isPraise"] = this.isPraise;
        data["upvote"] = this.upvote;
        data["comments"] = this.comments;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): TalksOutput {
        const json = this.toJSON();
        let result = new TalksOutput();
        result.init(json);
        return result;
    }
}

export interface ITalksOutput {
    id: string;
    /** 是否置顶 */
    isTop: boolean;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 点赞数量 */
    upvote: number;
    /** 评论数量 */
    comments: number;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;
}

export class TalksOutputPageResult implements ITalksOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TalksOutput[] | undefined;

    constructor(data?: ITalksOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(TalksOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TalksOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TalksOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): TalksOutputPageResult {
        const json = this.toJSON();
        let result = new TalksOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface ITalksOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TalksOutput[] | undefined;
}

export class TalksPageOutput implements ITalksPageOutput {
    /** 主键 */
    id: string;
    status: AvailabilityStatus;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 是否置顶 */
    isTop: boolean;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;

    constructor(data?: ITalksPageOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
            this.content = _data["content"];
            this.images = _data["images"];
            this.isAllowComments = _data["isAllowComments"];
            this.isPraise = _data["isPraise"];
            this.isTop = _data["isTop"];
            this.createdTime = _data["createdTime"] ? moment(_data["createdTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TalksPageOutput {
        data = typeof data === 'object' ? data : {};
        let result = new TalksPageOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["content"] = this.content;
        data["images"] = this.images;
        data["isAllowComments"] = this.isAllowComments;
        data["isPraise"] = this.isPraise;
        data["isTop"] = this.isTop;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
        return data;
    }

    clone(): TalksPageOutput {
        const json = this.toJSON();
        let result = new TalksPageOutput();
        result.init(json);
        return result;
    }
}

export interface ITalksPageOutput {
    /** 主键 */
    id: string;
    status: AvailabilityStatus;
    /** 内容 */
    content: string | undefined;
    /** 图片 */
    images: string | undefined;
    /** 是否允许评论 */
    isAllowComments: boolean;
    /** 是否已点赞 */
    isPraise: boolean;
    /** 是否置顶 */
    isTop: boolean;
    /** 发布时间 */
    createdTime: moment.Moment | undefined;
}

export class TalksPageOutputPageResult implements ITalksPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TalksPageOutput[] | undefined;

    constructor(data?: ITalksPageOutputPageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.pages = _data["pages"];
            this.total = _data["total"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows.push(TalksPageOutput.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TalksPageOutputPageResult {
        data = typeof data === 'object' ? data : {};
        let result = new TalksPageOutputPageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["pages"] = this.pages;
        data["total"] = this.total;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }

    clone(): TalksPageOutputPageResult {
        const json = this.toJSON();
        let result = new TalksPageOutputPageResult();
        result.init(json);
        return result;
    }
}

export interface ITalksPageOutputPageResult {
    pageNo: number;
    pageSize: number;
    pages: number;
    total: number;
    rows: TalksPageOutput[] | undefined;
}

export class TalksPageQueryInput implements ITalksPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 关键词 */
    keyword: string | undefined;

    constructor(data?: ITalksPageQueryInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            this.keyword = _data["keyword"];
        }
    }

    static fromJS(data: any): TalksPageQueryInput {
        data = typeof data === 'object' ? data : {};
        let result = new TalksPageQueryInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["keyword"] = this.keyword;
        return data;
    }

    clone(): TalksPageQueryInput {
        const json = this.toJSON();
        let result = new TalksPageQueryInput();
        result.init(json);
        return result;
    }
}

export interface ITalksPageQueryInput {
    pageNo: number;
    pageSize: number;
    /** 关键词 */
    keyword: string | undefined;
}

export class ZUserInfo implements IZUserInfo {
    id: string | undefined;
    creatorId: string | undefined;
    creationTime: moment.Moment | undefined;
    deleterId: string | undefined;
    deletionTime: moment.Moment | undefined;
    isDeleted: boolean | undefined;
    name: string | undefined;
    userName: string | undefined;
    passWord: string | undefined;

    constructor(data?: IZUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creatorId = _data["creatorId"];
            this.creationTime = _data["creationTime"] ? moment(_data["creationTime"].toString()) : <any>undefined;
            this.deleterId = _data["deleterId"];
            this.deletionTime = _data["deletionTime"] ? moment(_data["deletionTime"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
            this.name = _data["name"];
            this.userName = _data["userName"];
            this.passWord = _data["passWord"];
        }
    }

    static fromJS(data: any): ZUserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ZUserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creatorId"] = this.creatorId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["deleterId"] = this.deleterId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["passWord"] = this.passWord;
        return data;
    }

    clone(): ZUserInfo {
        const json = this.toJSON();
        let result = new ZUserInfo();
        result.init(json);
        return result;
    }
}

export interface IZUserInfo {
    id: string | undefined;
    creatorId: string | undefined;
    creationTime: moment.Moment | undefined;
    deleterId: string | undefined;
    deletionTime: moment.Moment | undefined;
    isDeleted: boolean | undefined;
    name: string | undefined;
    userName: string | undefined;
    passWord: string | undefined;
}

export class ZUserInfoDto implements IZUserInfoDto {
    id: string | undefined;
    /** 昵称 */
    name: string | undefined;
    /** 账号 */
    userName: string | undefined;
    /** 密码 */
    passWord: string | undefined;

    constructor(data?: IZUserInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.userName = _data["userName"];
            this.passWord = _data["passWord"];
        }
    }

    static fromJS(data: any): ZUserInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ZUserInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["passWord"] = this.passWord;
        return data;
    }

    clone(): ZUserInfoDto {
        const json = this.toJSON();
        let result = new ZUserInfoDto();
        result.init(json);
        return result;
    }
}

export interface IZUserInfoDto {
    id: string | undefined;
    /** 昵称 */
    name: string | undefined;
    /** 账号 */
    userName: string | undefined;
    /** 密码 */
    passWord: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
